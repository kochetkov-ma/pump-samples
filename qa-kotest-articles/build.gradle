plugins {
    // Integration with idea project settings
    id 'idea'
    // Very useful plugin. It checks all deps and plugins versions and show the latest if it exist. Task -> 'dependencyUpdates' ('help' group)
    id 'com.github.ben-manes.versions' version "$benManesPluginVersion"
    // Kotlin plugin
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion" apply false
    // Allure Plugin
    id "io.qameta.allure" version "$allurePluginVersion" apply false
}

allprojects { repositories { mavenLocal(); mavenCentral() } }

idea { module { downloadJavadoc = true; downloadSources = false } }

wrapper { distributionType = Wrapper.DistributionType.ALL; gradleVersion = gradleWrapperVersion }

apply from: "$rootDir/gradle/util.gradle"

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'io.qameta.allure'

    test { useJUnitPlatform() }

    dependencies {
        /* Kotlin (version from plugin) */
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        /* Logging API */
        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        /* Logging Impl */
        runtimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
        /* Kotest */
        testImplementation "io.kotest:kotest-extensions-allure:$kotestVersion"
        testImplementation "io.kotest:kotest-runner-junit5:$kotestVersion" // for kotest framework
        testImplementation "io.kotest:kotest-assertions-core:$kotestVersion" // for kotest core jvm assertions
        testImplementation "io.kotest:kotest-property:$kotestVersion" // for kotest property test

        testImplementation "org.assertj:assertj-core:3.19.0"
    }

    // noinspection GroovyAssignabilityCheck
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        kotlinOptions.jvmTarget = JavaVersion.VERSION_11
    }
    allure {
        version = allureVersion
        aspectjVersion = aspectVersion
        autoconfigure = false
        aspectjweaver = true
        resultsDir = file "$buildDir/allure-results"
    }
}
def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}
tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}